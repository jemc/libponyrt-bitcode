build_task:
  environment: &environment
    GITHUB_API_TOKEN: ENCRYPTED[636741c0f231293de78980eb83f86c5b8cd5dad07a79351e239c097e42ee4cc0f28113a26f6ad579437e40fcb227066c]
    PONYC_GIT_URL: https://github.com/ponylang/ponyc
    PONYC_VERSION: 0.44.0
    CC: clang
    CXX: clang++

  matrix:
    # (when adding new matrix tasks, also add them as deps to the bundle_task)

    - name: x86_64-unknown-linux-gnu
      container:
        image: ubuntu:21.04
      environment:
        TRIPLE: x86_64-unknown-linux-gnu
        DEPS_INSTALL_PRE: apt-get update
        DEPS_INSTALL: apt-get install -y --no-install-recommends apt-transport-https ca-certificates clang cmake curl git llvm make

    - name: x86_64-unknown-linux-musl
      environment:
        TRIPLE: x86_64-unknown-linux-musl
        DEPS_INSTALL: apk add --no-cache --update alpine-sdk coreutils linux-headers clang-dev cmake llvm12-dev
        PATCH_1: sed -i s/SO_RCVTIMEO/SO_RCVTIMEO_OLD/g /tmp/ponyc/src/libponyrt/lang/socket.c
        PATCH_2: sed -i s/SO_SNDTIMEO/SO_SNDTIMEO_OLD/g /tmp/ponyc/src/libponyrt/lang/socket.c
      container:
        image: alpine:3.15

    - name: arm64-unknown-linux-musl
      environment:
        TRIPLE: arm64-unknown-linux-musl
        DEPS_INSTALL: apk add --no-cache --update alpine-sdk coreutils linux-headers clang-dev cmake llvm12-dev
        PATCH_1: sed -i s/SO_RCVTIMEO/SO_RCVTIMEO_OLD/g /tmp/ponyc/src/libponyrt/lang/socket.c
        PATCH_2: sed -i s/SO_SNDTIMEO/SO_SNDTIMEO_OLD/g /tmp/ponyc/src/libponyrt/lang/socket.c
      arm_container:
        image: alpine:3.15

    - name: x86_64-unknown-freebsd
      environment:
        TRIPLE: x86_64-unknown-freebsd
        DEPS_INSTALL_PRE: pkg update
        DEPS_INSTALL: pkg install -y cmake gmake libunwind git llvm
      freebsd_instance:
        image: freebsd-13-0-release-amd64

    - name: x86_64-apple-macosx
      environment:
        TRIPLE: x86_64-apple-macosx
        DEPS_INSTALL_PRE: brew update --preinstall && brew install llvm@12 && brew cleanup
        DEPS_INSTALL: ln -s $(brew --prefix llvm@12)/bin/llvm-link /usr/local/bin/llvm-link
        SDKROOT: /Applications/Xcode-12.5.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # optimizes brew install
      macos_instance:
        image: big-sur-xcode-12.5
      # Caching some homebrew directories helps save some of the otherwise huge
      # amount of time that it takes to update brew from the CI base image.
      brew_cache:
        folder: "$HOME/Library/Caches/Homebrew"
      brew_usr_local_cache:
        folder: "/usr/local/Homebrew"

    - name: arm64-apple-macosx
      environment:
        TRIPLE: arm64-apple-macosx
        DEPS_INSTALL_PRE: brew update --preinstall && brew install llvm@12 && brew cleanup
        DEPS_INSTALL: ln -s $(brew --prefix llvm@12)/bin/llvm-link /usr/local/bin/llvm-link
        SDKROOT: /Applications/Xcode-12.5.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # optimizes brew install
        # We're compiling on an x86_64 host, but want to cross-compile to arm64.
        EXTRA_CMAKE_FLAGS: "-DCMAKE_C_COMPILER_TARGET=arm64-apple-macosx -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=arm64"
      macos_instance:
        image: big-sur-xcode-12.5
      # Caching some homebrew directories helps save some of the otherwise huge
      # amount of time that it takes to update brew from the CI base image.
      brew_cache:
        folder: "$HOME/Library/Caches/Homebrew"
      brew_usr_local_cache:
        folder: "/usr/local/Homebrew"

  deps_script:
    - sh -c "${DEPS_INSTALL_PRE:-echo}" && sh -c "${DEPS_INSTALL:-echo}"

  ponyc_clone_script: &ponyc_clone_script
    - git clone -b ${PONYC_VERSION} --depth 1 ${PONYC_GIT_URL} /tmp/ponyc
    - sh -c "${PATCH_1:-echo}" && sh -c "${PATCH_2:-echo}"
    - cd /tmp/ponyc && git diff
    - cd /tmp/ponyc && git apply ${CIRRUS_WORKING_DIR}/patches/*

  build_script:
    - mkdir /tmp/ponyc/src/libponyrt/build
    - cmake -S /tmp/ponyc/src/libponyrt -B /tmp/ponyc/src/libponyrt/build -DPONY_RUNTIME_BITCODE=true -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ${EXTRA_CMAKE_FLAGS}
    - cmake --build /tmp/ponyc/src/libponyrt/build --target libponyrt_bc

  publish_if_release_script:
    - echo CIRRUS_RELEASE "${CIRRUS_RELEASE:-NO}"
    - >-
      sh -c '
        test -z "${CIRRUS_RELEASE}" || \
          curl -v --fail -X POST \
            -H "Authorization: token ${GITHUB_API_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @/tmp/ponyc/src/libponyrt/build/libponyrt.bc \
            "https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=libsavi_runtime-${TRIPLE}.bc" \
      '

# After each bitcode is published, publish a bundle containing them all.
bundle_task:
  depends_on:
    # Please ensure that this list always has the full set of matrix task names.
    - x86_64-unknown-linux-musl
    - x86_64-unknown-linux-gnu
    - x86_64-unknown-linux-musl
    - arm64-unknown-linux-musl
    - x86_64-unknown-freebsd
    - x86_64-apple-macosx
    - arm64-apple-macosx
  environment: *environment
  container:
    image: alpine:3.15

  # Download dependencies. Also explicitly check for the programs we intend
  # to use only in the release-guarded scripts, since we want to fail fast
  # on them being missing even on a CI run that isn't a release.
  deps_script:
    - apk add --no-cache --update coreutils findutils curl git jq tar gzip
    - xargs --version
    - curl --version
    - jq --version

  # Clone the ponyc source code and patch it for the Savi runtime,
  # using the exact same script used by the earlier build task matrix.
  ponyc_clone_script: *ponyc_clone_script

  # Copy the relevant part of the (patched) ponyc source code into /tmp/out.
  copy_source_script:
    - mkdir -p /tmp/out
    - cp -r /tmp/ponyc/src/libponyrt /tmp/out/src

  # Download any/all *.bc files for this release into /tmp/out.
  download_bitcode_if_release_script:
    - mkdir -p /tmp/out
    - >-
      test -z "${CIRRUS_RELEASE}" || sh -c ' \
        cd /tmp/out && \
        curl -v --fail \
          -H "Authorization: token ${GITHUB_API_TOKEN}" \
          https://api.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE \
        | jq -r ".assets[] | select(.name | endswith(\".bc\")) | .browser_download_url" \
        | xargs -n 1 curl --fail -L -O \
          -H "Authorization: token ${GITHUB_API_TOKEN}" \
      '
    -

  # Bundle everything in the /tmp/out directory into a single tar archive.
  archive_script:
    - tar -czvf /tmp/libsavi_runtime.tar.gz -C /tmp/out .

  # Publish the bundle as an asset for the release.
  publish_if_release_script:
    - echo CIRRUS_RELEASE "${CIRRUS_RELEASE:-NO}"
    - >-
      sh -c '
        test -z "${CIRRUS_RELEASE}" || \
          curl -v --fail -X POST \
            -H "Authorization: token ${GITHUB_API_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @/tmp/libsavi_runtime.tar.gz \
            "https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=libsavi_runtime.tar.gz" \
      '
